<?php

/**
 * @file
 * Hook implementations for the Deeson CKEditor module.
 */

/**
 * Implements hook_theme().
 */
function deeson_ckeditor_theme($existing, $type, $theme, $path) {
  return [
    'deeson_widget' => [
      'variables' => [
        'type' => NULL,
        'config' => [],
        'content' => [],
      ]
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function deeson_ckeditor_theme_suggestions_deeson_widget(array $variables) {
  // Generic deeson-widget--TYPE.html.twig template.
  $suggestions = ['deeson_widget__' . $variables['type']];

  // Optional display mode based deeson-widget--TYPE--MODE.html.twig template.
  if (!empty($variables['config']['mode'])) {
    $suggestions[] = $suggestions[0] . '__' . $variables['config']['mode'];
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_deeson_widget(&$variables) {
  // CKEditor naming convention for plugins uses camelCase for 'type' which
  // triggers PHPCS warnings as this expects snake_case functions. Normalise
  // them here before passing into list of preprocess candidates.
  $variables['type'] = preg_replace('/([A-Z])/', '_\\1', $variables['type']);
  $variables['type'] = strtolower($variables['type']);

  // Delegate the preprocessing to widget-specific functions.
  $function = 'deeson_ckeditor_preprocess_deeson_widget__' . $variables['type'];
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function deeson_ckeditor_editor_js_settings_alter(array &$settings) {
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {
      $settings['editor']['formats'][$text_format_id]['editorSettings']['height'] = '500px';
      $settings['editor']['formats'][$text_format_id]['editorSettings']['fillEmptyBlocks'] = FALSE;
    }
  }
}
